#!/bin/python

import os
import sys
import math
# Complete the solve function below.
def egcd(a,b):
    x,y=0,1
    lastx,lasty=1,0
    while b:
        a,(q,b)=b,divmod(a,b)
        x,lastx=lastx-q*x,x
        y,lasty=lasty-q*y,y
    return (lastx,lasty,a)
def factors(n):
    fac=[]
    while(n%2==0):
        fac.append(2)
        n/=2
    for i in range(3,int(math.sqrt(n))+1,2):
        while(n%i==0):
            fac.append(i)
            n/=i
    if(n>2):
        fac.append(n)
    return fac
def convertBase(n,b):
    ans=[]
    while(n!=0):
        rem=n%b
        ans.append(rem)
        n/=b
    return ans[::-1]
def ncr(n,r):
    if n<r:
        return 0
    else:
        return math.factorial(n)/(math.factorial(r)*math.factorial(n-r))
def chinese_remainder_theorem(items):
    N=1
    for a,n in items:
        N*=n
    result=0
    for a,n in items:
        m=N//n
        r,s,d=egcd(n,m)
        result+=a*s*m
    return result%N
def solve(N, R, M):
    crt=[]
    facs=factors(M)
    for fac in facs:
        n=convertBase(N,fac)
        r=convertBase(R,fac)
        l=len(n)
        while(len(r)<l):
            r=[0]+r
        prod=1
        for i in range(l):
            prod*=ncr(n[i],r[i])
        crt.append((prod,fac))
    return chinese_remainder_theorem(crt)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(raw_input())

    for t_itr in xrange(t):
        nrm = raw_input().split()

        n = int(nrm[0])

        r = int(nrm[1])

        m = int(nrm[2])

        result = solve(n, r, m)

        fptr.write(str(result) + '\n')

    fptr.close()
