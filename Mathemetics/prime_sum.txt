#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the solve function below.
bool judge(long long n,long long k)
{
    if(n>=4)
    {
        if(n%2==0)
        {
            return k<=n/2;
        }
        else
        {
            return (k-1)<=(n-3)/2;
        }
    }
    return false;
}
long long modmult(long long a,long long b,long long mod)
{
    if(a==0||b<mod/a)
    {
        return (a*b)%mod;
    }
    long long sum=0;
    while(b>0)
    {
        if(b&1)
        {
            sum=(sum+a)%mod;
        }
        a=(2*a)%mod;
        b>>=1;
    }
    return sum;
}
long long modpow(long long a,long long b,long long mod)
{
    long long product,pseq;
    product=1;
    pseq=a%mod;
    while(b>0)
    {
        if(b&1)
        {
            product=modmult(product,pseq,mod);
        }
        pseq=modmult(pseq,pseq,mod);
        b>>=1;
    }
    return product;
}
bool MillerRabin(long long n,int seed)
{
    int k=0;
    if(n<2)
    {
        return false;
    }
    if(n==2)
    {
        return false;
    }
    long long m=n-1;
    while(!(m&1))
    {
        m>>=1;
        k+=1;
    }
    long long a=seed;
    a=modpow(a,m,n);
    if(a==1||a==n-1)
    {
        return true;
    }
    for(int j=0;j<k-1;j++)
    {
        a=modpow(a,2,n);
        if(a==1)
        {
            return false;
        }
        if(a==n-1)
        {
            return true;
        }
    }
    return false;
}
const int maxn=1000000;
bool isprime[maxn+10];
void sieve()
{
    memset(isprime,true,sizeof(isprime));
    isprime[0]=false;
    isprime[1]=false;
    for(int i=2;i*i<=maxn;i++)
    {
        if(isprime[i])
        {
            for(int j=2*i;j<=maxn;j+=i)
            {
                isprime[j]=false;
            }
        }
    }
}
bool primalityTest(long long n)
{
    if(n<=maxn)
    {
        return isprime[n];
    }
    else
    {
        return MillerRabin(n,2)&&MillerRabin(n,13)&&MillerRabin(n,23)&&MillerRabin(n,1662803);
    }
}
string solve(long n, long k) 
{
    
    if(k>2)
    {
        return(judge(n,k)?"Yes":"No");
    }
    else if(k==2)
    {
        if(n%2==0)
        {
            return ((n>2)?"Yes":"No");
        }
        else
        {
            return (primalityTest(n-2)?"Yes":"No");
        }
    }
    else
    {
        return (primalityTest(n)?"Yes":"No");                    
    }
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));
    sieve();
    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string nk_temp;
        getline(cin, nk_temp);

        vector<string> nk = split_string(nk_temp);

        long n = stol(nk[0]);

        long k = stol(nk[1]);

        string result = solve(n, k);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
