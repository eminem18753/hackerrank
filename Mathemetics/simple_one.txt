#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the solve function below.
int k=4;
long long m=1000000007;
long long x,y;

inline long long powerMod(long long a,long long b,long long m)
{
    long long r=1;
    while(b>0)
    {
        if(b&1)
        {
            r=(r*a)%m;
        }
        a=(a*a)%m;
        b/=2;
    }
    return r;
}
vector<vector<long long> > mul(vector<vector<long long> > A,vector<vector<long long> > B)
{
    vector<vector<long long> > C(k,vector<long long>(k));
    for(int i=0;i<k;i++)
    {
        for(int j=0;j<k;j++)
        {
            for(int t=0;t<k;t++)
            {
                C[i][j]=(C[i][j]+A[i][t]*B[t][j])%m;
            }
        }
    }
    return C;
}
vector<vector<long long> > power(vector<vector<long long> > A,long long p)
{
    if(p==1)
    {
        return A;
    }
    if(p%2==1)
    {
        return mul(A,power(A,p-1)); 
    }
    vector<vector<long long> > X=power(A,p/2);
    return mul(X,X);
}
void fib(long long p,long long q,long long N)
{
    vector<long long> F1(k);
    vector<vector<long long> > T(k,vector<long long>(k));
    
    F1[0]=p;
    F1[1]=(long long)2*(p*q%m)%m;
    F1[2]=q;
    F1[3]=((q*q%m)-(p*p%m))%m;
    
    T[0][0]=0;
    T[0][1]=1;
    T[0][2]=0;
    T[0][3]=0;
    T[1][0]=0;
    T[1][1]=q;
    T[1][2]=0;
    T[1][3]=p;
    T[2][0]=0;
    T[2][1]=0;
    T[2][2]=0;
    T[2][3]=1;
    T[3][0]=0;
    T[3][1]=-p;
    T[3][2]=0;
    T[3][3]=q;
    
    if(N==1)
    {
        x=p;
        y=q;
        return;
    }
    T=power(T,N-1);
    x=0;
    y=0;
    for(int i=0;i<k;i++)
    {
        x=(x+T[0][i]*F1[i])%m;
        y=(y+T[2][i]*F1[i])%m;
    }
}
int solve(int p, int q, int n) 
{
    fib((long long)p,(long long)q,(long long)n);
    if(x<0)
    {
        x+=m;
    }
    if(y<0)
    {
        y+=m;
    }
    y=powerMod(y,m-2,m);
    int answer=(int)((long long)x*(long long)y%m);
    return answer;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string pqn_temp;
        getline(cin, pqn_temp);

        vector<string> pqn = split_string(pqn_temp);

        int p = stoi(pqn[0]);

        int q = stoi(pqn[1]);

        int n = stoi(pqn[2]);

        int result = solve(p, q, n);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
