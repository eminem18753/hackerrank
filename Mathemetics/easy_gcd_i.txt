#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);
int gcd(int a,int b)
{
    if(b==0)
    {
        return a;
    }
    else
    {
        return gcd(b,a%b);
    }
}
int main()
{
    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string A_temp_temp;
    getline(cin, A_temp_temp);

    vector<string> A_temp = split_string(A_temp_temp);

    vector<int> A(n);

    for (int i = 0; i < n; i++) 
    {
        int A_item = stoi(A_temp[i]);

        A[i] = A_item;
    }
    int result=A[0];
    for(int i=1;i<n;i++)
    {
        result=gcd(result,A[i]);
    }
    if(k<result)
    {
        int number;
        int flag=0;
        for(int i=2;i<=sqrt(result);i++)
        {
            if(result%i==0)
            {
                number=i;
                flag=1;
                break;
            }
        }
        if(flag==1)
        {
            cout<<k-k%number;
        }
        if(flag==0)
        {
            cout<<0<<endl;
        }
    }
    else
    {
        int number;
        int flag=0;
        for(int i=2;i<=sqrt(result);i++)
        {
            if(result%i==0)
            {
                number=i;
                flag=1;
                break;
            }
        }
        if(flag==1)
        {
            cout<<k-k%number;
        }
        else
        {
            cout<<k-k%result<<endl;
        }
    }
    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
