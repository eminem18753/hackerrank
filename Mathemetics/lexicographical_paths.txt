#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

int c[21][21];
void init()
{
    for(int i=1;i<=20;i++)
    {
        c[i][0]=1;
        c[i][i]=1;
        for(int j=1;j<=i-1;j++)
        {
            c[i][j]=c[i-1][j]+c[i-1][j-1];
        }
    }
}
// Complete the solve function below.
string solve(int x, int y, int k) 
{
    int cx=0;
    int cy=0;
    string result="";
    while(cx!=x||cy!=y)
    {
        int nx=x-cx;
        int ny=y-cy;
        if(nx==0)
        {
            result+="V";
            cy+=1;
        }
        else if(ny==0)
        {
            result+="H";
            cx+=1;
        }
        else
        {
            int temp=c[nx+ny-1][nx-1];
            if(k>=temp&&temp>0)
            {
                result+="V";
                k-=temp;
                cy+=1;
            }
            else
            {
                result+="H";
                cx+=1;
            }
        }
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));
    init();
    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string xyk_temp;
        getline(cin, xyk_temp);

        vector<string> xyk = split_string(xyk_temp);

        int x = stoi(xyk[0]);

        int y = stoi(xyk[1]);

        int k = stoi(xyk[2]);

        string result = solve(x, y, k);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
