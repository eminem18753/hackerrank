#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);
const int m=1000000007;
struct Type
{
    int val[15][15];
}mat;
Type mul(Type a,Type b)
{
    Type ret;
    memset(ret.val,0,sizeof(ret.val));
    for(int i=0;i<15;i++)
    {
        for(int j=0;j<15;j++)
        {
            for(int k=0;k<15;k++)
            {
                ret.val[i][j]=(ret.val[i][j]+(long long)a.val[i][k]*b.val[k][j])%m;
            }
        }
    }
    return ret;
}
Type power(Type a,long long n)
{
    Type ret;
    memset(ret.val,0,sizeof(ret.val));
    for(int i=0;i<15;i++)
    {
        ret.val[i][i]=1;
    }
    while(n!=0)
    {
        if(n%2==1)
        {
            ret=mul(ret,a);
        }
        a=mul(a,a);
        n/=2;
    }
    return ret;
}
// Complete the solve function below.
int solve(long n, vector<int> heights)
{
    int result;
    memset(mat.val,0,sizeof(mat.val));
    for(int i=0;i<heights.size();i++)
    {
        mat.val[0][heights[i]-1]=1;
    }
    for(int i=1;i<=14;i++)
    {
        mat.val[i][i-1]=1;
    }
    Type ret=power(mat,n);
    result=ret.val[0][0]*2%m;
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    long n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int heights_count;
    cin >> heights_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string heights_temp_temp;
    getline(cin, heights_temp_temp);

    vector<string> heights_temp = split_string(heights_temp_temp);

    vector<int> heights(heights_count);

    for (int i = 0; i < heights_count; i++) {
        int heights_item = stoi(heights_temp[i]);

        heights[i] = heights_item;
    }

    int result = solve(n, heights);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
