#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the solve function below.
int type=1;
int counter=0;

vector<int> solve(int n,int m,vector<vector<int>> operations) 
{
    vector<int> result;
    for(int i=0;i<operations.size();i++)
    {
        if(operations[i][0]==1)
        {
            counter=(counter+operations[i][1])%n;
        }
        else
        {
            type=3-type;
            counter=(n-counter+operations[i][1])%n;
        }
    }
    if(type==1)
    {
        result.push_back(1);
        result.push_back((n-counter)%n);
    }
    else
    {
        result.push_back(2);
        result.push_back(counter%n);
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    vector<vector<int>> operations(m);
    for (int i = 0; i < m; i++) {
        operations[i].resize(2);

        for (int j = 0; j < 2; j++) {
            cin >> operations[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<int> result = solve(n,m,operations);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
