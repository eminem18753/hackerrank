#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the solve function below.
int f[1001][1001][11];
int g[1001][1001];
int c[1001][1001];
int m=1000000007;

void init()
{
    for(int i=1;i<=1000;i++)
    {
        c[i][0]=1;
        c[i][1]=i;
        c[i][i]=1;
    }
    for(int i=2;i<=1000;i++)
    {
        for(int j=2;j<=1000;j++)
        {
            c[i][j]=(c[i-1][j]%m+c[i-1][j-1]%m)%m;   
        }
    }
}
int foo(int i,int j,int k)
{
    if(f[i][j][k]!=-1)
    {
        return f[i][j][k];
    }
    if(i==0)
    {
        return f[i][j][k]=1;
    }
    int val1=(k*(long long)foo(i-1,min(i-1,j),k))%m;
    int val2=(k*(long long)c[i-1][j])%m;
    int val3=((long long)val2*(long long)foo(i-j-1,min(i-j-1,j),k-1))%m;
    f[i][j][k]=(val1+m-val3)%m;
    return f[i][j][k];
}
int solve(int n, int k) 
{
    return g[n][min(n,k)];
}

int main()
{
    init();
    memset(f,-1,sizeof(f));
    for(int i=1;i<=1000;i++)
    {
        for(int j=1;j<=i;j++)
        {
            for(int k=1;k<=10;k++)
            {
                f[i][j][k]=foo(i,j,k);
            }
        }
    }
    for(int i=1;i<=1000;i++)
    {
        for(int j=1;j<=i;j++)
        {
            int val1=(9*(long long)foo(i-1,min(i-1,j),10))%m;
            int val2=(9*(long long)c[i-1][j])%m;
            int val3=((long long)val2*foo(i-j-1,min(i-j-1,j),9))%m;
            g[i][j]=(val1+m-val3)%m;
        }
    }
    
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string nk_temp;
        getline(cin, nk_temp);

        vector<string> nk = split_string(nk_temp);

        int n = stoi(nk[0]);

        int k = stoi(nk[1]);

        int result = solve(n, k);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
