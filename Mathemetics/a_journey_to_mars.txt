#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

const int ten[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};
// Complete the solve function below.
long long calculation(int a,int b,int k)
{
    long double temp=b*log10((long double)a);
    int t=floor(temp);
    temp=temp-t;
    return (long long)(pow(10.0,temp)*ten[min(t,k-1)]);
}
long long quickpow(long long a,long long b,long long mod)
{
    long long result=1;
    for(;b;b>>=1)
    {
        if(b&1)
        {
            result=result*a%mod;
        }
        a=a*a%mod;
    }
    return result;
}
int solve(int n, int k) 
{
    int result=calculation(2,n-1,k)+quickpow((long long)2,n-1,ten[k]);
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string nk_temp;
        getline(cin, nk_temp);

        vector<string> nk = split_string(nk_temp);

        int n = stoi(nk[0]);

        int k = stoi(nk[1]);

        int result = solve(n, k);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
