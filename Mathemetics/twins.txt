#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

vector<int> total;
// Complete the solve function below.
void simpleSieve(int limit)
{
    bool primes[limit+1];
    memset(primes,true,sizeof(primes));
    for(int i=2;i<limit+1;i++)
    {
        if(primes[i])
        {
            total.push_back(i);
            for(long j=(long)i*i;j<limit+1;j+=i)
            {
                primes[(int)j]=false;
            }
        }
    }
}
int solve(int n, int m)
{
    int size=m-n+1;
    simpleSieve(size);
    bool primes[size];
    memset(primes,true,sizeof(primes));
    for(int i=0;i<total.size();i++)
    {
        for(int j=n/total[i]*total[i];j<=m;j+=total[i])
        {
            if(j>=n&&j>total[i])
            {
                primes[j-n]=false;
            }
        }
    }
    int result=0;
    for(int i=0;i+2<size;i++)
    {
        if(n+i>=2&&primes[i]&&primes[i+2])
        {
            result+=1;
        }
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    int result = solve(n, m);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
