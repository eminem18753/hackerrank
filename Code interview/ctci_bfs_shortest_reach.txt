#include <cmath>
#include <cstdio>
#include <vector>
#include <deque>
#include <set>
#include <unordered_map>
#include <iostream>
#include <algorithm>
using namespace std;

class Graph
 {
    public:
        unordered_map<int,vector<int>> total;
        int N;
        Graph(int n) 
        {
            total.clear();
            N=n;
        }
    
        void add_edge(int u, int v) 
        {
            total[u].push_back(v);
            total[v].push_back(u);
        }
    
        vector<int> shortest_reach(int start) 
        {
            vector<int> result(N,-1);
            vector<int> output;
            deque<int> q;
            deque<int> c;
            set<int> overall;
            q.push_back(start);
            c.push_back(0);
            while(q.size()>0)
            {
                int p=q.front();
                int k=c.front();
                q.pop_front();
                c.pop_front();
                if(result[p]==-1)
                {
                    result[p]=k;
                }
                for(int i=0;i<total[p].size();i++)
                {
                    if(result[total[p][i]]==-1&&overall.find(total[p][i])==overall.end())
                    {
                        q.push_back(total[p][i]);
                        c.push_back(k+6);
                        overall.insert(total[p][i]);
                    }
                }
            }
            return result;
        }
    
};

int main() {
    int queries;
    cin >> queries;
        
    for (int t = 0; t < queries; t++) {
      
		int n, m;
        cin >> n;
        // Create a graph of size n where each edge weight is 6: 
        Graph graph(n);
        cin >> m;
        // read and set edges
        for (int i = 0; i < m; i++) {
            int u, v;
            cin >> u >> v;
            u--, v--;
            // add each edge to the graph
            graph.add_edge(u, v);
        }
		int startId;
        cin >> startId;
        startId--;
        // Find shortest reach from node s
        vector<int> distances = graph.shortest_reach(startId);

        for (int i = 0; i < distances.size(); i++) {
            if (i != startId) {
                cout << distances[i] << " ";
            }
        }
        cout << endl;
    }
    
    return 0;
}

