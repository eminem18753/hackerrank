#include <bits/stdc++.h>

using namespace std;

/*
 * Complete the contacts function below.
 */
 struct trie
 {
     map<char,trie*> next;
     int r=0;
 };
 typedef struct trie trie;
 trie* root;
vector<int> contacts(vector<vector<string>> queries) 
{
    /*
     * Write your code here.
     */
    vector<int> result;
    root=new trie;
    for(int i=0;i<queries.size();i++)
    {
        if(queries[i][0]=="add")
        {
            trie* temp=root;
            for(int j=0;j<queries[i][1].length();j++)
            {
                if(temp->next.find(queries[i][1][j])==temp->next.end())
                {
                    temp->next[queries[i][1][j]]=new trie;
                    temp->next[queries[i][1][j]]->r=0;
                }
                temp=temp->next[queries[i][1][j]];
                temp->r++;
            }
        }
        else
        {
            trie* temp=root;
            int f=0;
            for(int j=0;j<queries[i][1].length();j++)
            {
                if(temp->next.find(queries[i][1][j])==temp->next.end())
                {
                    f=1;
                    break;
                }
                temp=temp->next[queries[i][1][j]];
            }
            if(f==0)
            {
                result.push_back(temp->r);
            }
            else
            {
                result.push_back(0);
            }
        }
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int queries_rows;
    cin >> queries_rows;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<string>> queries(queries_rows);
    for (int queries_row_itr = 0; queries_row_itr < queries_rows; queries_row_itr++) {
        queries[queries_row_itr].resize(2);

        for (int queries_column_itr = 0; queries_column_itr < 2; queries_column_itr++) {
            cin >> queries[queries_row_itr][queries_column_itr];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<int> result = contacts(queries);

    for (int result_itr = 0; result_itr < result.size(); result_itr++) {
        fout << result[result_itr];

        if (result_itr != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
