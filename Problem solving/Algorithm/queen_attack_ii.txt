#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the queensAttack function below.
int queensAttack(int n, int k, int r_q, int c_q, vector<vector<int>> obstacles) 
{
    int m=100000000;
    
    int up=m;
    int down=m;
    int left=m;
    int right=m;
    int upLeft=m;
    int upRight=m;
    int downLeft=m;
    int downRight=m;
    
    for(int i=0;i<obstacles.size();i++)
    {
        if(obstacles[i][0]==r_q&&obstacles[i][1]>c_q&&obstacles[i][1]-c_q<up)
        {
            up=obstacles[i][1]-c_q;
        }
        if(obstacles[i][0]==r_q&&obstacles[i][1]<c_q&&c_q-obstacles[i][1]<down)
        {
            down=c_q-obstacles[i][1];
        }
        if(obstacles[i][0]>r_q&&obstacles[i][1]==c_q&&obstacles[i][0]-r_q<right)
        {
            right=obstacles[i][0]-r_q;
        }
        if(obstacles[i][0]<r_q&&obstacles[i][1]==c_q&&r_q-obstacles[i][0]<left)
        {
            left=r_q-obstacles[i][0];
        }
        if(obstacles[i][0]+obstacles[i][1]==r_q+c_q&&obstacles[i][0]>r_q&&obstacles[i][0]-r_q<upLeft)
        {
            upLeft=obstacles[i][0]-r_q;
        }
        if(obstacles[i][0]+obstacles[i][1]==r_q+c_q&&obstacles[i][0]<r_q&&r_q-obstacles[i][0]<upRight)
        {
            upRight=r_q-obstacles[i][0];
        }
        if(obstacles[i][0]-r_q==obstacles[i][1]-c_q&&obstacles[i][0]>r_q&&obstacles[i][0]-r_q<downLeft)
        {
            downLeft=obstacles[i][0]-r_q;
        }
        if(obstacles[i][0]-r_q==obstacles[i][1]-c_q&&obstacles[i][0]<r_q&&r_q-obstacles[i][0]<downRight)
        {
            downRight=r_q-obstacles[i][0];
        }
        
    }
    
    int result=0;
    if(up==m)
    {
        result+=n-c_q;
    }
    else
    {
        result+=up-1;
    }

    if(down==m)
    {
        result+=c_q-1;
    }
    else
    {
        result+=down-1;
    }

    if(right==m)
    {
        result+=n-r_q;
    }
    else
    {
        result+=right-1;
    }

    if(left==m)
    {
        result+=r_q-1;
    }
    else
    {
        result+=left-1;
    }
    
    if(upLeft==m)
    {
        result+=min(n-r_q,c_q-1);
    }
    else
    {
        result+=upLeft-1;
    }

    if(upRight==m)
    {
        result+=min(r_q-1,n-c_q);
    }
    else
    {
        result+=upRight-1;
    }

    if(downLeft==m)
    {
        result+=min(n-r_q,n-c_q);
    }
    else
    {
        result+=downLeft-1;
    }

    if(downRight==m)
    {
        result+=min(r_q-1,c_q-1);
    }
    else
    {
        result+=downRight-1;
    }
    
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string r_qC_q_temp;
    getline(cin, r_qC_q_temp);

    vector<string> r_qC_q = split_string(r_qC_q_temp);

    int r_q = stoi(r_qC_q[0]);

    int c_q = stoi(r_qC_q[1]);

    vector<vector<int>> obstacles(k);
    for (int i = 0; i < k; i++) {
        obstacles[i].resize(2);

        for (int j = 0; j < 2; j++) {
            cin >> obstacles[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = queensAttack(n, k, r_q, c_q, obstacles);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
