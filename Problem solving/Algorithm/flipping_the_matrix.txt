#include <bits/stdc++.h>

using namespace std;

// Complete the flippingMatrix function below.
int flippingMatrix(vector<vector<int>> matrix) 
{
    int result=0;;
    int n=matrix.size();
    for(int i=0;i<n/2;i++)
    {
        for(int j=0;j<n/2;j++)
        {
            int maximum=-5000;
            if(matrix[i][j]>maximum)
            {
                maximum=matrix[i][j];
            }
            if(matrix[n-1-i][j]>maximum)
            {
                maximum=matrix[n-1-i][j];
            }
            if(matrix[i][n-1-j]>maximum)
            {
                maximum=matrix[i][n-1-j];
            }
            if(matrix[n-1-i][n-1-j]>maximum)
            {
                maximum=matrix[n-1-i][n-1-j];
            }
            result+=maximum;
        }
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        vector<vector<int>> matrix(2*n);
        for (int i = 0; i < 2*n; i++) {
            matrix[i].resize(2*n);

            for (int j = 0; j < 2*n; j++) {
                cin >> matrix[i][j];
            }

            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        int result = flippingMatrix(matrix);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
