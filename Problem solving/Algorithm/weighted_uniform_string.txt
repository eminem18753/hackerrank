#include <bits/stdc++.h>

using namespace std;

// Complete the weightedUniformStrings function below.
vector<string> weightedUniformStrings(string s, vector<int> queries)
{
    vector<string> result;
    bool total[10000001];
    memset(total,0,sizeof(total));
    int current=1;
    int count=1;
    char previous='1';
    for(int i=0;i<s.length();i++)
    {
        if(s[i]==previous)
        {
            count+=1;
        }
        else
        {
            count=1;
        }
        int result=(s[i]-'a'+1)*count;
        total[result]=true;
        previous=s[i];
    }
    for(int i=0;i<queries.size();i++)
    {
        if(total[queries[i]]==true)
        {
            result.push_back("Yes");
        }
        else
        {
            result.push_back("No");
        }
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    int queries_count;
    cin >> queries_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        int queries_item;
        cin >> queries_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        queries[i] = queries_item;
    }

    vector<string> result = weightedUniformStrings(s, queries);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
