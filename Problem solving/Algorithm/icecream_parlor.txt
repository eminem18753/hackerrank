#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the icecreamParlor function below.
vector<int> icecreamParlor(int m, vector<int> arr) 
{
    int a[10001];
    int first=0;
    int happen=0;
    vector<int> result;
    
    for(int i=0;i<10001;i++)
    {
        a[i]=0;
    }
    for(int i=0;i<arr.size();i++)
    {
        a[arr[i]]+=1;
    }
    for(int i=0;i<10001;i++)
    {
        if(a[i]>0)
        {
            result.push_back(i);
        }
    }
    if(m%2==0)
    {
        if(a[m/2]==1)
        {
            happen=1;
        }
    }
    vector<int> output;
    int flag=0;
    for(int i=0;i<arr.size();i++)
    {
        int index=0;
        if(flag==1)
        {
            break;
        }
        if(arr[i]==m)
        {
            continue;
        }
        if(index=binary_search(result.begin(),result.end(),m-arr[i]))
        {
            if(happen==1)
            {
                if(arr[i]==m/2)
                {
                    continue;
                }
            }
            if(arr[i]!=m)
            {
                output.push_back(i+1);
            }
            for(int j=0;j<arr.size();j++)
            {
                if(arr[j]==m-arr[i]&&j!=i)
                {
                    if(arr[j]!=m)
                    {
                        output.push_back(j+1);
                    }
                    flag=1;
                    break;
                }
            }
            
        }
    }
    return output;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int m;
        cin >> m;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string arr_temp_temp;
        getline(cin, arr_temp_temp);

        vector<string> arr_temp = split_string(arr_temp_temp);

        vector<int> arr(n);

        for (int i = 0; i < n; i++) {
            int arr_item = stoi(arr_temp[i]);

            arr[i] = arr_item;
        }

        vector<int> result = icecreamParlor(m, arr);

        for (int i = 0; i < result.size(); i++) {
            fout << result[i];

            if (i != result.size() - 1) {
                fout << " ";
            }
        }

        fout << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
