#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the surfaceArea function below.
int surfaceArea(vector<vector<int>> A) 
{
    int concaveCount=0;
    int rowCount=A.size();
    int columnCount=A[0].size();
    vector<int> rowMax;
    vector<int> columnMax;
    for(int i=0;i<rowCount;i++)
    {
        int maximum=0;
        for(int j=0;j<columnCount;j++)
        {
            if(A[i][j]>maximum)
            {
                maximum=A[i][j];
            }
        }
        rowMax.push_back(maximum);
    }
    for(int i=0;i<columnCount;i++)
    {
        int maximum=0;
        for(int j=0;j<rowCount;j++)
        {
            if(A[j][i]>maximum)
            {
                maximum=A[j][i];
            }
        }
        columnMax.push_back(maximum);
    }
    int summation=0;
    for(int i=0;i<rowMax.size();i++)
    {
        summation+=rowMax[i];
    }
    for(int i=0;i<columnMax.size();i++)
    {
        summation+=columnMax[i];
    }
    int output=0;
    if(A[0].size()>=3)
    {
        for(int i=0;i<A.size();i++)
        {
            int flag=0;
            int temp=0;
            int currentMinimum=0;
            int minimum=0;
            int always=0;
            for(int j=1;j<A[0].size()-1;j++)
            {
                if(A[i][j-1]>A[i][j]&&flag==0)
                {
                    flag=1;
                    temp=A[i][j-1];
                    always=A[i][j-1];
                    currentMinimum=A[i][j];
                }
                if(A[i][j+1]<currentMinimum&&flag==1)
                {
                    currentMinimum=A[i][j+1];
                }
                else if(A[i][j+1]>currentMinimum&&flag==1)
                {
                    flag=0;
                    if(A[i][j+1]<temp)
                    {
                        temp=A[i][j+1];
                        flag=1;
                    }
                    minimum=temp-currentMinimum;
                    concaveCount+=minimum*2;
                    if(flag==1)
                    {
                        currentMinimum=temp;
                        temp=always;
                    }
                }
            }
        }
    }
    if(A.size()>=3)
    {
        for(int i=0;i<A[0].size();i++)
        {
            int flag=0;
            int temp=0;
            int currentMinimum=0;
            int minimum=0;
            int always=0;
            for(int j=1;j<A.size()-1;j++)
            {
                if(A[j-1][i]>A[j][i]&&flag==0)
                {
                    flag=1;
                    temp=A[j-1][i];
                    always=A[j-1][i];
                    currentMinimum=A[j][i];
                }
                if(A[j+1][i]<currentMinimum&&flag==1)
                {
                    currentMinimum=A[j+1][i];
                }
                else if(A[j+1][i]>currentMinimum&&flag==1)
                {
                    flag=0;
                    if(A[j+1][i]<temp)
                    {
                        temp=A[j+1][i];
                        flag=1;
                    }
                    minimum=temp-currentMinimum;
                    concaveCount+=minimum*2;
                    if(flag==1)
                    {
                        currentMinimum=temp;
                        temp=always;
                    }
                }
            }
        }
    }
    output=2*rowCount*columnCount+2*summation+concaveCount;
    return output;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string HW_temp;
    getline(cin, HW_temp);

    vector<string> HW = split_string(HW_temp);

    int H = stoi(HW[0]);

    int W = stoi(HW[1]);

    vector<vector<int>> A(H);
    for (int i = 0; i < H; i++) {
        A[i].resize(W);

        for (int j = 0; j < W; j++) {
            cin >> A[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = surfaceArea(A);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
